{
  "title": "Taipan.js",
  "menu" : { 
    "menu"          : "Menu",
    "home"          : "Home",
    "about"         : "About",
    "example"       : "Example",
    "code"          : "Code",
    "download"      : "Download",
    "documentation" : "Documentation",
    "contact"       : "Contact"
  },
  "section" : {
    "home" : {
      "h1" : "Taipan.js",
      "description" : "An open source finite state machine written in TypeScript."
    },
    "about" : {
      "h2" : "About",
      "text" : "<p>A finite state machine is a very good way to keep things in order. Using a sequential logic circuits helps your code to be clean and easy to read.</p><p>It is an abstract machine that can be in one of a finite number of states. The machine is in only one state at a time; the state it is in at any given time is called the current state. It can change from one state to another when initiated by a triggering event or condition; this is called a transition. A particular FSM is defined by a list of its states, its initial state, and the triggering condition for each transition.</p><p>Check the <a href=\"#source\" class=\"page-scroll\">Code</a> section for more information on how to use Taipan.js.</p><p> You can help develop Taipan.js on <a href=\"https://github.com/LCluber\" target=\"_blank\">Github</a>.</p>"
    },
    "code" : {
      "h2" : "Code",
      "h3" : "Javascript (main.js)",
      "p1" : "Instantiate a state machine with an array of events as parameter.",
      "p2" : "activate traffic lights. The finite state machine executes authorized operations only."
    },
    "download" : {
      "h2" : "Download Taipan.js",
      "min" : "Taipan.min.js",
      "zip" : "Taipanjs.zip",
      "github" : "Clone from Github"
    },
    "contact" : {
      "h2" : "Contact me",
      "description" : "Feel free to ask me about my work, give me suggestions, or just to say hi.",
      "website" : "lcluber.com"
    }
  },
  "github":"Github",
  "twitter":"Twitter"
}
