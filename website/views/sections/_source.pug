section( id='source' class='container content-section text-center' )
  div( class='row' )
    div( class='col-lg-8 col-lg-offset-2' )
      h2 Code
      
      h3 Javascript (main.js)
      
      p Instantiate a collision scene to handle collisions between rigid bodies .
      pre.
        //create collision scene
        var collisionScene = BUMP.Scene.create();
      
      p Create few particles
      pre.
        var particleQty    = 400;
        var particleSize   = 6;
        var particleWeight = 1.0;
        // class for a particle
        var particle = {
          create : function( positionX, positionY, velocityX, velocityY, size, weight, color ){
            var obj     = Object.create(this);
            obj.body    = TYPE6JS.Geometry.Circle.create( positionX, positionY, size * 0.5 );
            obj.physics = BUMP.Physics.create(  
                                        TYPE6JS.Vector2D.create( velocityX, velocityY ),
                                        TYPE6JS.Vector2D.create( size, size ),
                                        weight,
                                        0.9,
                                        0.8
                                      );
            obj.color   = color;
            return obj;
          },
          // compute the position of a particle at each frame
          update: function(){
            this.body.position.addTo( this.physics.setPosition( animation.getDelta().getSecond() ) );
          },
          
          draw: function(){
            //draw
          }
        };
        
        // create a bunch of particles
        for( var i = 0 ; i &lt; particleQty; i++ ){
          var radius   = TYPE6JS.Random.float( 0, 120 );
          var angle    = TYPE6JS.Random.float( 0, TYPE6JS.Trigonometry.TWOPI );
          particles[i] = particle.create(
                            width * 0.5,
                            height * 0.25,
                            TYPE6JS.Trigonometry.cosineEquation( radius, angle, 0, 0 ),
                            TYPE6JS.Trigonometry.sineEquation( radius, angle, 0, 0 ),
                            particleSize,
                            particleWeight,
                            '#000000'
                         );
          // add each particle to the collision scene
          collisionScene.addBody( particles[i] );
        }
      
      p Create floor
      pre.
        // class for rectangle floor
        var rectangle = {
          create : function( positionX, positionY, sizeX, sizeY ){
            var obj     = Object.create(this);
            obj.body    = TYPE6JS.Geometry.Rectangle.create( positionX, positionY, sizeX, sizeY );
            obj.physics = BUMP.Physics.create(  TYPE6JS.Vector2D.create(),
                                        TYPE6JS.Vector2D.create( sizeX, sizeY ),
                                        0.0,
                                        0.0,
                                        0.2
                                      );
            return obj;
          },
          
          draw : function(){
            //draw
          }
          
        };
        // create the floor
        var floor = rectangle.create( width * 0.5, height, width * 0.5, 200 );
        // add the floor to the collision scene
        collisionScene.addBody( floor );
        
      p Animation
      pre.
        function updatePositions(){
          for( var i = 0 ; i &lt; particleQty ; i++ )
            particles[i].update();
        }
        
        function render(){
          updatePositions();
          collisionScene.test();
          clearFrame();
          draw();
          animation.newFrame();
        }
