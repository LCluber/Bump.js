section( id='source' class='container content-section text-center' )
  div( class='row' )
    div( class='col-lg-8 col-lg-offset-2' )
      h2 Code
      
      h3 Javascript (main.js)
      
      p Instantiate a HTML5 canvas
      pre.
        var playButton = findById('play');
        var canvas     = document.getElementById("canvas");
        var context    = canvas.getContext("2d");
        var width      = canvas.width  = window.innerWidth;
        var height     = canvas.height = window.innerHeight;
        var animation  = new Framerat.Player(render); // instantiate animation loop
      
      p Instantiate 2 collision scenes to handle collisions between rigid bodies .
      pre.
        //create collision scenes
        var collisionScene1 = new Bump.Scene();
        var collisionScene2 = new Bump.Scene();
        collisionScene1.setIteration(3);
        collisionScene2.setIteration(3);
      
      p Create few particles
      pre.
        var particleQty    = 300;
        // class for a particle
        var particle = {
          create : function( positionX, positionY, velocityX, velocityY, size, weight, color ){
            var obj     = Object.create(this);
            obj.physics = new Bump.Physics( positionX, positionY,
                                            velocityX, velocityY,
                                            size, size,
                                            weight,
                                            0.8,
                                            0.7,
                                            'circle'
                                          );
            obj.physics.setGravity( 0, 400 );
            obj.color   = color;
            return obj;
          },
          // compute the position of a particle at each frame
          update: function(){
            this.physics.updatePosition( Type6.Time.millisecondToSecond(animation.clock.delta) );
          },
          
          draw: function(){
            this.physics.draw( context, this.color, null, null );
          }
        };
        
        // create a bunch of particles
        var particles = [];
        for( var i = 0 ; i &lt; particleQty; i++ ){
          var radius   = Type6.Random.float( 0, 140 ); //120
          var angle    = Type6.Random.float( 0, Type6.Trigonometry.twopi );
          var particleRadius = Type6.Random.integer( 3, 6 );
          particles[i] = particle.create(
                            width * 0.5,
                            height * 0.25,
                            Type6.Trigonometry.cosineEquation( radius, angle, 0, 0 ),
                            Type6.Trigonometry.sineEquation( radius, angle, 0, 0 ),
                            particleRadius,
                            particleRadius,
                            '#555555'
                         );
          collisionScene2.addBody( particles[i].physics );
        }
      
      p Create floor
      pre.
        // class for rectangle floor
        var rectangle = {
          create : function( positionX, positionY, sizeX, sizeY ){
            var obj     = Object.create(this);
            obj.physics = new Bump.Physics( positionX, positionY,
                                            0.0, 0.0,
                                            sizeX, sizeY,
                                            0.0,
                                            0.0,
                                            0.7,
                                            'rectangle');
            return obj;
          },
          
          draw : function(){
            this.physics.draw( context, '#cccccc', null, null );
          }
          
        };
        // create the floor
        var floor = rectangle.create( width * 0.5, height, width * 0.5, 200 );
        // add the floor to the collision scene
        collisionScene1.addBody( floor );
        
      p Animation
      pre.
        function draw() {
          floor.draw();
          
          for( i = 0 ; i &lt; particleQty ; i++ )
            particles[i].draw();
          
        }
        
        function updatePositions(){
          for( var i = 0 ; i &lt; particleQty ; i++ )
            particles[i].update();
        }

        function testCollisions(){
            collisionScene2.test();//test collisions between particles
            collisionScene2.testScene(collisionScene1);//test collisions between floor and particles 
        }
        
        function clearFrame(){
          context.clearRect( 0, 0, width, height );
        }
        
        function render(){
          updatePositions();
          testCollisions();
          clearFrame();
          draw();
          animation.newFrame();
        }
